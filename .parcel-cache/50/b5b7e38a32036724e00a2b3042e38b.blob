"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _leaflet = _interopRequireDefault(require("leaflet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MapView {
  constructor() {
    _defineProperty(this, "_map", void 0);

    _defineProperty(this, "_position", void 0);

    _defineProperty(this, "_containerWorkouts", document.querySelector('.workouts'));

    _defineProperty(this, "_form", document.querySelector('.form'));

    _defineProperty(this, "_inputDistance", document.querySelector('.form__input--distance'));

    _defineProperty(this, "_inputDuration", document.querySelector('.form__input--duration'));

    _defineProperty(this, "_inputCadence", document.querySelector('.form__input--cadence'));

    _defineProperty(this, "_inputElevation", document.querySelector('.form__input--elevation'));

    _defineProperty(this, "_inputType", document.querySelector('.form__input--type'));
  }

  _clearInputFields() {
    this._inputType.value = this._inputDistance.value = this._inputDuration.value = this._inputCadence.value = '';

    this._inputDistance.focus();
  }

  displayMap(coords) {
    const {
      latitude,
      longitude
    } = coords;
    this._map = _leaflet.default.map('map').setView([latitude, longitude], 10);

    _leaflet.default.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(this._map);
  }

  displayFormOnClick() {
    this._map.on('click', e => {
      const {
        lat,
        lng
      } = e.latlng;
      this._position = {
        lat,
        lng
      };

      this._form.classList.remove('hidden');

      this._inputDistance.focus();
    });
  }

  displayWorkoutOnSubmit(handler) {
    this._form.addEventListener('submit', e => {
      e.preventDefault();
      const {
        lat,
        lng
      } = this._position;

      const data = this._getWorkoutData();

      this._clearInputFields();

      if (!data) return;
      handler([lat, lng], ...data);
      const popUpOptions = {
        autoClose: false,
        autoPan: true,
        className: `${data[0]}-popup`,
        closeOnClick: false,
        maxWidth: 250,
        maxWidth: 100
      };

      _leaflet.default.marker([lat, lng]).addTo(this._map).bindPopup(_leaflet.default.popup(popUpOptions).setContent(`running`)).openPopup();
    });
  }

  toggleEffortOnType() {
    this._inputType.addEventListener('change', () => {
      this._inputElevation.closest('.form__row').classList.toggle('form__row--hidden');

      this._inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
    });
  }

  _getWorkoutData() {
    const type = this._inputType.value;
    const distance = +this._inputDistance.value;
    const duration = +this._inputDuration.value;
    if (!Number.isFinite(distance) || !Number.isFinite(duration)) return;
    const effort = type === 'running' ? +this._inputCadence.value : +this._inputElevation.value;
    return [type, distance, duration, effort];
  }

  renderWorkout(workout) {
    console.log(workout);

    const markUp = this._generateMarkUp(workout);

    this._containerWorkouts.insertAdjacentHTML('beforeend', markUp);
  }

  _generateMarkUp(workout) {
    return `      
    <<li class="workout workout--running" data-id=${workout.id}>
      <h2 class="workout__title">Running on April 14</h2>
      <div class="workout__details">
        <span class="workout__icon">${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} :</span>
        <span class="workout__value">${workout.distance}</span>
        <span class="workout__unit">km</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚è±</span>
        <span class="workout__value">${workout.duration}</span>
        <span class="workout__unit">min</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚ö°Ô∏è</span>
        <span class="workout__value">4.6</span>
        <span class="workout__unit">min/km</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">ü¶∂üèº</span>
        <span class="workout__value">178</span>
        <span class="workout__unit">spm</span>
      </div>
    </li>`;
  }

}

var _default = new MapView();

exports.default = _default;